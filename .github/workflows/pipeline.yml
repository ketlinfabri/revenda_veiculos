on:
  push:
    branches:
      - main
      - develop

env:
  CLUSTER_NAME: "FIAP-revenda-veiculos"  # Nome do cluster EKS

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Extract repository name
        id: repo-name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

  build-and-push-ecr:
    name: Push Docker Image to AWS ECR
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Etapa 1: Checkout do código
      - name: Checkout code
        uses: actions/checkout@v4

      # Etapa 2: Configurar AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Etapa 3: Autenticar no Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

       # Etapa 4: Extrair o nome do repositório
      - name: Extract repository name
        id: repo-name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      # Etapa 5: Construir a imagem Docker
      - name: Build Docker image
        run: |
          docker build -t $REPO_NAME:latest .
          docker tag $REPO_NAME:latest ${{ steps.login-ecr.outputs.registry }}/$REPO_NAME:latest

      # Etapa 6: Criar o repositório no ECR se não existir
      - name: Create ECR repository if it doesn't exist
        id: check-image
        run: |
          aws ecr create-repository --repository-name $REPO_NAME
        continue-on-error: true

      # Etapa 7: Push da imagem Docker para o ECR
      - name: Force Push Docker Image if exists
        if: steps.check-image.outputs.result != 'Image does not exist'
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/$REPO_NAME:latest

      # Etapa 8: Verificar se o EKS já foi criado
      - name: Check if EKS cluster exists
        run: |
          aws eks describe-cluster --name $CLUSTER_NAME --region ${{ secrets.AWS_REGION }} || exit 1
        continue-on-error: false  # Caso o cluster não exista, o workflow falha aqui

#  kubernetes-deploy:
#    name: Deploy Application to EKS
#    runs-on: ubuntu-latest
#    needs: build-and-push-ecr
#
#    steps:
#      # Etapa 1: Checkout do código
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      # Etapa 2: Configurar AWS CLI
#      - name: Configure AWS CLI
#        uses: aws-actions/configure-aws-credentials@v3
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}
#
#      # Etapa 3: Autenticar no Amazon ECR
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#
#      # Etapa 4: Configurar kubectl para interagir com o EKS
#      - name: Configure kubectl
#        run: |
#          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name $CLUSTER_NAME
#
#      # Etapa 5: Definir as variáveis de ambiente
#      - name: Set environment variables
#        run: |
#          echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV
#          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
#          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
#          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
#          echo "COGNITO_REGION=${{ secrets.COGNITO_REGION }}" >> $GITHUB_ENV
#          echo "USER_POOL_ID=${{ secrets.USER_POOL_ID }}" >> $GITHUB_ENV
#          echo "CLIENT_ID=${{ secrets.CLIENT_ID }}" >> $GITHUB_ENV
#          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
#          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
#          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
#          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
#          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
#
#
#      # Etapa 6: Substituir variáveis nos arquivos Kubernetes
#      - name: Substitute variables in deployment.yaml
#        run: |
#          envsubst < k8s/deployment.yaml > k8s/deployment-final.yaml
##          cat k8s/deployment-final.yaml
#
#      - name: Substitute variables in service.yaml
#        run: |
#          envsubst < k8s/service.yaml > k8s/service-final.yaml
##          cat k8s/service-final.yaml
#
#      # Etapa 7: Aplicar Kubernetes manifests
#      - name: Apply Kubernetes manifests
#        run: |
#          kubectl apply -f k8s/deployment-final.yaml
#          kubectl apply -f k8s/service-final.yaml